/**
 * @copyright 2025 Osememen Ogbe
 * @license Apache-2.0
 */

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  email          String    @unique
  emailVerified  DateTime?
  phoneNo        String?
  image          String?
  dateOfBirth    DateTime?
  hashedPassword String
  role           UserType?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  token       Token?
  businesses  Business[]
  resumes     Resume[]
  Application Application[]
}

enum UserType {
  recruiter
  talent
}

model Token {
  userId       String  @id @map("_id") @db.ObjectId
  refreshToken String?

  user User @relation(fields: [userId], references: [id])
}

model Business {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  slug             String   @unique
  tagline          String?
  industry         String?
  organizationSize String?
  organizationType String?
  email            String?
  logo             String?
  logoPublicId     String?
  description      String?
  location         String?
  website          String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  recruiterId String        @db.ObjectId
  recruiter   User          @relation(fields: [recruiterId], references: [id])
  jobs        Job[]
  Application Application[]
}

model Job {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  slug        String    @unique
  description String
  category    String
  location    String
  level       String
  salary      Int
  type        JobType
  workMode    String // e.g., Remote, On-site
  isPaid      Boolean // Whether the job is paid
  status      JobStatus @default(pending)
  deadline    DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  businessId  String        @db.ObjectId
  business    Business      @relation(fields: [businessId], references: [id])
  Application Application[]
}

enum JobType {
  fulltime
  parttime
  contract
  internship
  freelance
  temporary
  volunteer
}

enum JobStatus {
  open
  closed
  pending
  rejected
}

model Resume {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @db.ObjectId
  user         User     @relation(fields: [userId], references: [id])
  fileUrl      String
  filePublicId String
  isDefault    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  applications Application[]
}

model Application {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  businessId String   @db.ObjectId
  business   Business @relation(fields: [businessId], references: [id])
  jobId      String   @db.ObjectId
  job        Job      @relation(fields: [jobId], references: [id])
  talentId   String   @db.ObjectId
  talent     User     @relation(fields: [talentId], references: [id])
  resumeId   String   @db.ObjectId
  resume     Resume   @relation(fields: [resumeId], references: [id])
  status     String   @default("pending")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
